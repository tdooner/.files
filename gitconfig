[user]
  name = Tom Dooner
  email = tomdooner@gmail.com
[includeIf "gitdir:~/dev/cfa/"]
  path = "~/.files/gitconfig-cfa"
[includeIf "gitdir:~/dev/codeforamerica/"]
  path = "~/.files/gitconfig-cfa"
[help]
  autocorrect = 10
[log]
  decorate = short
[color]
  ui = auto
[merge]
  log = 1000
[pager]
  show-branch = true
[rebase]
  autosquash = true
[rerere]
  enabled = true
[branch "master"]
  rebase = true

[diff]
	compactionHeuristic = true

[apply]
  whitespace = fix
  # automagically fix whitespace
  # see `man git-apply' for other options

[core]
  excludesfile = ~/.gitignore
  whitespace = trailing-space,space-before-tab
	pager = less -R

[alias]
  st = status
  ci = commit -v
  co = checkout
  au = add -u
  rc = rebase --continue
  last = "!bash -c \"select BRANCH in \\$(git reflog | egrep -o '[0-9]{8}\\-[^\\) ]+' | head -n 100 | sort | tac | uniq); do git checkout \\$BRANCH && break; done;\""
  wip = commit -a -n -m 'WIP ----------------- WIP -------------------- WIP'
  uncommit = "!bash -c \"git show --pretty=format:%B --quiet > /tmp/git-uncommit; git reset HEAD^\""
  recommit = "!bash -c \"git ci -F /tmp/git-uncommit\""
  edit-unmerged = \
        "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  add-unmerged = \
        "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

  oneline = log --oneline
  # e14d631 (HEAD, origin/master, origin/HEAD, master) Merge branch 'maint'
  # 0f64a5a Merge branch 'rr/misc-fixes'
  # ef563de convert.c: Fix return type of git_path_check_eol()
  # 1e501a7 (origin/maint) documentation fix: git difftool uses diff tools, not merge tools.
  # 05bab3e config.c: Fix a static buffer overwrite bug by avoiding mkpath()
  # 3a81f33 t5501-*.sh: Fix url passed to clone in setup test

  graph = log --oneline --graph
  # *   e14d631 (HEAD, origin/master, origin/HEAD, master) Merge branch 'maint'
  # |\
  # | * 1e501a7 (origin/maint) documentation fix: git difftool uses diff tools, not merge tools.
  # * |   0f64a5a Merge branch 'rr/misc-fixes'
  # |\ \
  # | * | ef563de convert.c: Fix return type of git_path_check_eol()
  # * | | 05bab3e config.c: Fix a static buffer overwrite bug by avoiding mkpath()
  # * | | 3a81f33 t5501-*.sh: Fix url passed to clone in setup test

  # last = log -1
  # show the commit message of HEAD

  patch = add --patch
  # add hunks of code interactively
  # useful for separating a bunch of changes into logical commits

  amend = commit --amend -v
  # take staging and push it into the previous commit
  # useful when adding small chunks to a WIP commit

  staged = diff --cached
  cached = diff --cached
  both = diff HEAD
  unmerged = diff --diff-filter=U --name-only
  # shows modified+staged union diff

  sha1 = !sh -c 'git rev-parse ${1-`echo HEAD`}' -
  # sha1 of the current branch's HEAD

  abbrev = !sh -c 'git rev-parse --short ${1-`echo HEAD`}' -
  # shows a 7 character abbreviation of a reference, defaulting to HEAD

  ph = push origin HEAD
  # push HEAD on the current branch to the branch on origin

  poh = pull --rebase origin HEAD
  # pull upstream changes locally only if
  # - local is already up to date
  # - local changes can be cleanly rebased on top of origin and fast-forwarded

  rom = rebase origin/master
  rhu = reset --hard @{u}
  # useful rebasing your topic branch against the newest version of master

  from = !sh -c 'git fetch origin && git rebase origin/master' -
  fromi = !sh -c 'git fetch origin && git rebase -i origin/master' -
  frum = !sh -c 'git fetch upstream && git rebase upstream/master' -
  frumi = !sh -c 'git fetch upstream && git rebase -i upstream/master' -
  # fetch origin and rebase against origin master

  resom = !sh -c 'git fetch origin && git reset --hard origin/master' -
  # fetch origin and reset hard to origin/master

  fixup = !sh -c 'parent=$(git rev-parse $1~1) && \
    git commit --fixup $1 && \
    git diff --quiet && stash=false || stash=true && \
    ($stash && git stash || true) && \
    GIT_EDITOR=~/bin/true git rebase -i $parent && \
    ($stash && git stash pop || true)' -
  # amend to a previous commit:
  #  git add file
  #  git fixup HEAD^^
  # will put the changes to 'file' to the commit two behind HEAD

  ri = rebase --interactive --autosquash
  # perform an interactive rebase from a given commitish

  fresh = !sh -c 'git fetch --all && git reset --hard origin/master' -
  # fetch from all remotes and reset to origin/master

  su = submodule update --init
  # update or initialize each submodule

  ten = log --oneline --graph -10

  ridof = !sh -c 'wc -l $1 && git rm $1' -
  j = jira
[push]
  default = simple

[include]
  path = ~/.files/gitconfig-flynn
