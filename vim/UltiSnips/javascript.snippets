snippet cc "createClass" b
const ${1:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`} = React.createClass({
  propTypes: {
  },

  /**
   * @return {Object}
   */
  render: function() {
    return (
      $0
    );
  }
});

module.exports = $1;
endsnippet

snippet pt "React.propTypes" b
React.propTypes.$0
endsnippet

snippet ct "create tests" b
const React = require('react');

const OnboardingFlowLocationPage =
  require('./index.jsx');

describe('<${1:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`}>', function() {
  beforeEach(() => {
    // spyOn(eventLog, 'handleEvent');

    this.subject = () => {
      this.props = {
        $2
      };

      return Utils.render(<$1 {...this.props} />);
    };
  });

  it('renders', () => {
    expect(this.subject()).toHaveComponent(
      $1,
      { count: 1 }
    );
  });

  // it('sends a contextual event', () => {
  //   this.subject();
  //   expect(eventLog.handleEvent).toHaveBeenCalledWith({
  //     page: 'foo',
  //     action: 'IMPRESSION',
  //   });
  // });
});
endsnippet
