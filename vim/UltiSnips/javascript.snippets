# vim: expandtab
snippet cc "createClass" b
import React, { PropTypes } from 'react';

export default class ${1:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(re.sub('\.jsx?$', '', snip.basename).split('_'))`} extends React.Component {
  static propTypes = {
    $2
  }

  constructor(props) {
    super(props);

    this.state = {
    };
  }

  render() {
    return (
      <div />
    );
  }
};
endsnippet

snippet pt "React.propTypes" b
React.propTypes.$0
endsnippet

snippet ct "create tests" bm
const React = require('react');

const Utils = require('support/utils');

const $1 = require('./index.jsx');

describe('<${1:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`}>', function() {
  beforeEach(() => {
    this.props = {
      $2
    };

    this.subject = () => {
      return Utils.render(<$1 {...this.props} />);
    };
  });

  it('renders', () => {
    expect(this.subject()).toHaveComponent($1, { count: 1 });
  });
});
endsnippet

snippet tp "this.props" bm
const {
  $1,
} = this.props;

endsnippet

snippet ts "this.state" bm
const {
  $1,
} = this.state;

endsnippet

snippet hd "happo.define" bm
happo.define('<${0:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`}>', function() {
  Utils.renderAttached(
    <$0
      $1
    />
  );
}, { viewports: ['small', 'medium'] });
endsnippet

snippet it "jasmine it" bm
it('$1', (done) => {
  $2
});
endsnippet

snippet describe "jasmine describe" bm
describe('$1', () => {
  beforeEach(() => {
    $2
  });

  it('$3', () => {
    $4
  });
});
endsnippet


snippet Controller "controller" b
${1:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`}.Controller = Controller({
  Component: $1,
  fetch: () => {
    $4
  },
  stores: [
    $3
  ],
  resources: {
    $2
  },
});
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
  $1
},
endsnippet

snippet cwm "componentWillMount" b
componentWillMount() {
  $1
},
endsnippet

snippet cwu "componentWillUnmount" b
componentWillUnmount() {
  $1
},
endsnippet

snippet cwrp "componentWillReceiveProps" b
componentWillReceiveProps(nextProps) {
  $1
},
endsnippet

snippet cwu "componentDidUpdate" b
componentDidUpdate(nextProps, nextState) {
  $1
},
endsnippet

snippet cwu "componentWillUpdate" b
componentWillUpdate(nextProps, nextState) {
  $1
},
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(nextProps, nextState) {
  $1
},
endsnippet

snippet gis "getInitialState" b
getInitialState() {
  return {
    $1,
  };
},
endsnippet

snippet gdp "getDefaultProps" b
getDefaultProps() {
  return {
    $1,
  };
},
endsnippet

snippet css "create store (singleton)" b
const Schema = require('lib/schema');
const SingletonResourceStore = require('stores/singleton_resource_store');

class ${1:`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-1]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`} extends SingletonResourceStore {
  constructor() {
    super();
  }

  getResourceDefinition() {
    return {
      schema: new Schema({
      }),
    };
  }
}

module.exports = new $1();
endsnippet

snippet lg "console.log" b
console.log('$1');
endsnippet

snippet Intl "IntlStore.t('Component'" w
{IntlStore.t('`!p
if snip.basename[0:5] == "index":
  snip.rv = re.sub('\.jsx?$', '', path).split('/')[-2]
else:
  snip.rv = ''.join(x.title() for x in re.sub('\.jsx?$', '', snip.basename).split('_'))`.$0')}
endsnippet
